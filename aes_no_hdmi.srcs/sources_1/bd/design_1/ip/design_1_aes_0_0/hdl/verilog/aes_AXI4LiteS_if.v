// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module aes_AXI4LiteS_if
#(parameter
    C_ADDR_WIDTH = 7,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESETN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    // user signals
    output wire [31:0]               I_sourceAddress,
    output wire [127:0]              I_key_in_V,
    output wire [31:0]               I_destinationAddress,
    output wire [31:0]               I_length_r,
    output wire [0:0]                I_enable_i,
    input  wire [0:0]                O_enable_o,
    output wire [31:0]               I_bram_input_address,
    output wire [31:0]               I_bram_output_address
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : reserved
// 0x14 : Data signal of sourceAddress
//        bit 31~0 - sourceAddress[31:0] (Read/Write)
// 0x18 : reserved
// 0x1c : Data signal of key_in_V
//        bit 31~0 - key_in_V[31:0] (Read/Write)
// 0x20 : Data signal of key_in_V
//        bit 31~0 - key_in_V[63:32] (Read/Write)
// 0x24 : Data signal of key_in_V
//        bit 31~0 - key_in_V[95:64] (Read/Write)
// 0x28 : Data signal of key_in_V
//        bit 31~0 - key_in_V[127:96] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of destinationAddress
//        bit 31~0 - destinationAddress[31:0] (Read/Write)
// 0x34 : reserved
// 0x38 : Data signal of length_r
//        bit 31~0 - length_r[31:0] (Read/Write)
// 0x3c : reserved
// 0x40 : Data signal of enable_i
//        bit 0  - enable_i[0] (Read/Write)
//        others - reserved
// 0x44 : reserved
// 0x48 : Data signal of enable_o
//        bit 0  - enable_o[0] (Read)
//        others - reserved
// 0x4c : reserved
// 0x50 : Data signal of bram_input_address
//        bit 31~0 - bram_input_address[31:0] (Read/Write)
// 0x54 : reserved
// 0x58 : Data signal of bram_output_address
//        bit 31~0 - bram_output_address[31:0] (Read/Write)
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 7;

// address
localparam
    ADDR_SOURCEADDRESS_CTRL         = 7'h10,
    ADDR_SOURCEADDRESS_DATA_0       = 7'h14,
    ADDR_KEY_IN_V_CTRL              = 7'h18,
    ADDR_KEY_IN_V_DATA_0            = 7'h1c,
    ADDR_KEY_IN_V_DATA_1            = 7'h20,
    ADDR_KEY_IN_V_DATA_2            = 7'h24,
    ADDR_KEY_IN_V_DATA_3            = 7'h28,
    ADDR_DESTINATIONADDRESS_CTRL    = 7'h2c,
    ADDR_DESTINATIONADDRESS_DATA_0  = 7'h30,
    ADDR_LENGTH_R_CTRL              = 7'h34,
    ADDR_LENGTH_R_DATA_0            = 7'h38,
    ADDR_ENABLE_I_CTRL              = 7'h3c,
    ADDR_ENABLE_I_DATA_0            = 7'h40,
    ADDR_ENABLE_O_CTRL              = 7'h44,
    ADDR_ENABLE_O_DATA_0            = 7'h48,
    ADDR_BRAM_INPUT_ADDRESS_CTRL    = 7'h4c,
    ADDR_BRAM_INPUT_ADDRESS_DATA_0  = 7'h50,
    ADDR_BRAM_OUTPUT_ADDRESS_CTRL   = 7'h54,
    ADDR_BRAM_OUTPUT_ADDRESS_DATA_0 = 7'h58;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
reg  [31:0]          _sourceAddress;
reg  [127:0]         _key_in_V;
reg  [31:0]          _destinationAddress;
reg  [31:0]          _length_r;
reg  [0:0]           _enable_i;
wire [0:0]           _enable_o;
reg  [31:0]          _bram_input_address;
reg  [31:0]          _bram_output_address;

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (~ARESETN)
        wstate <= WRIDLE;
    else
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (aw_hs)
        waddr <= AWADDR[ADDR_BITS-1:0];
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (~ARESETN)
        rstate <= RDIDLE;
    else
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ar_hs) begin
        rdata <= 1'b0;
        case (raddr)
            ADDR_SOURCEADDRESS_DATA_0: begin
                rdata <= _sourceAddress[31:0];
            end
            ADDR_KEY_IN_V_DATA_0: begin
                rdata <= _key_in_V[31:0];
            end
            ADDR_KEY_IN_V_DATA_1: begin
                rdata <= _key_in_V[63:32];
            end
            ADDR_KEY_IN_V_DATA_2: begin
                rdata <= _key_in_V[95:64];
            end
            ADDR_KEY_IN_V_DATA_3: begin
                rdata <= _key_in_V[127:96];
            end
            ADDR_DESTINATIONADDRESS_DATA_0: begin
                rdata <= _destinationAddress[31:0];
            end
            ADDR_LENGTH_R_DATA_0: begin
                rdata <= _length_r[31:0];
            end
            ADDR_ENABLE_I_DATA_0: begin
                rdata <= _enable_i[0:0];
            end
            ADDR_ENABLE_O_DATA_0: begin
                rdata <= _enable_o[0:0];
            end
            ADDR_BRAM_INPUT_ADDRESS_DATA_0: begin
                rdata <= _bram_input_address[31:0];
            end
            ADDR_BRAM_OUTPUT_ADDRESS_DATA_0: begin
                rdata <= _bram_output_address[31:0];
            end
        endcase
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign I_sourceAddress       = _sourceAddress;
assign I_key_in_V            = _key_in_V;
assign I_destinationAddress  = _destinationAddress;
assign I_length_r            = _length_r;
assign I_enable_i            = _enable_i;
assign _enable_o             = O_enable_o;
assign I_bram_input_address  = _bram_input_address;
assign I_bram_output_address = _bram_output_address;

// _sourceAddress[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SOURCEADDRESS_DATA_0)
        _sourceAddress[31:0] <= (WDATA[31:0] & wmask) | (_sourceAddress[31:0] & ~wmask);
end

// _key_in_V[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KEY_IN_V_DATA_0)
        _key_in_V[31:0] <= (WDATA[31:0] & wmask) | (_key_in_V[31:0] & ~wmask);
end

// _key_in_V[63:32]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KEY_IN_V_DATA_1)
        _key_in_V[63:32] <= (WDATA[31:0] & wmask) | (_key_in_V[63:32] & ~wmask);
end

// _key_in_V[95:64]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KEY_IN_V_DATA_2)
        _key_in_V[95:64] <= (WDATA[31:0] & wmask) | (_key_in_V[95:64] & ~wmask);
end

// _key_in_V[127:96]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KEY_IN_V_DATA_3)
        _key_in_V[127:96] <= (WDATA[31:0] & wmask) | (_key_in_V[127:96] & ~wmask);
end

// _destinationAddress[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_DESTINATIONADDRESS_DATA_0)
        _destinationAddress[31:0] <= (WDATA[31:0] & wmask) | (_destinationAddress[31:0] & ~wmask);
end

// _length_r[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_LENGTH_R_DATA_0)
        _length_r[31:0] <= (WDATA[31:0] & wmask) | (_length_r[31:0] & ~wmask);
end

// _enable_i[0:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_ENABLE_I_DATA_0)
        _enable_i[0:0] <= (WDATA[31:0] & wmask) | (_enable_i[0:0] & ~wmask);
end

// _bram_input_address[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_BRAM_INPUT_ADDRESS_DATA_0)
        _bram_input_address[31:0] <= (WDATA[31:0] & wmask) | (_bram_input_address[31:0] & ~wmask);
end

// _bram_output_address[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_BRAM_OUTPUT_ADDRESS_DATA_0)
        _bram_output_address[31:0] <= (WDATA[31:0] & wmask) | (_bram_output_address[31:0] & ~wmask);
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule
